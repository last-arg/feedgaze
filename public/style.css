@import "open-props-colors.css";
/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}


/* 
  Global styles/variables

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/

:root {
  --step--2: clamp(0.6944rem, 0.6856rem + 0.0444vi, 0.72rem);
  --step--1: clamp(0.8333rem, 0.8101rem + 0.1159vi, 0.9rem);
  --step-0: clamp(1rem, 0.9565rem + 0.2174vi, 1.125rem);
  --step-1: clamp(1.2rem, 1.1283rem + 0.3587vi, 1.4063rem);
  --step-2: clamp(1.44rem, 1.3295rem + 0.5527vi, 1.7578rem);
  --step-3: clamp(1.728rem, 1.5648rem + 0.8161vi, 2.1973rem);
  --step-4: clamp(2.0736rem, 1.8395rem + 1.1704vi, 2.7466rem);
  --step-5: clamp(2.4883rem, 2.1597rem + 1.6433vi, 3.4332rem);

  --space-3xs: clamp(0.3125rem, 0.3125rem + 0vi, 0.3125rem);
  --space-2xs: clamp(0.5625rem, 0.5408rem + 0.1087vi, 0.625rem);
  --space-xs: clamp(0.875rem, 0.8533rem + 0.1087vi, 0.9375rem);
  --space-s: clamp(1.125rem, 1.0815rem + 0.2174vi, 1.25rem);
  --space-m: clamp(1.6875rem, 1.6223rem + 0.3261vi, 1.875rem);
  --space-l: clamp(2.25rem, 2.163rem + 0.4348vi, 2.5rem);
  --space-xl: clamp(3.375rem, 3.2446rem + 0.6522vi, 3.75rem);
  --space-2xl: clamp(4.5rem, 4.3261rem + 0.8696vi, 5rem);
  --space-3xl: clamp(6.75rem, 6.4891rem + 1.3043vi, 7.5rem);

  /* One-up pairs */
  --space-3xs-2xs: clamp(0.3125rem, 0.2038rem + 0.5435vi, 0.625rem);
  --space-2xs-xs: clamp(0.5625rem, 0.4321rem + 0.6522vi, 0.9375rem);
  --space-xs-s: clamp(0.875rem, 0.7446rem + 0.6522vi, 1.25rem);
  --space-s-m: clamp(1.125rem, 0.8641rem + 1.3043vi, 1.875rem);
  --space-m-l: clamp(1.6875rem, 1.4049rem + 1.413vi, 2.5rem);
  --space-l-xl: clamp(2.25rem, 1.7283rem + 2.6087vi, 3.75rem);
  --space-xl-2xl: clamp(3.375rem, 2.8098rem + 2.8261vi, 5rem);
  --space-2xl-3xl: clamp(4.5rem, 3.4565rem + 5.2174vi, 7.5rem);

  /* Custom pairs */
  --space-s-l: clamp(1.125rem, 0.6467rem + 2.3913vi, 2.5rem);
}

:root {
  --font-base: Arial;
  --gutter: var(--space-s-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --leading-standard: 1.4;

  --text-1: var(--gray-12);
  --surface-1: var(--gray-0);
}

body {
  background: var(--surface-1);
  color: var(--text-1);
  font-size: var(--step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
}  

ul {
  margin-block-start: 0;
  padding-inline-start: 0;
}

fieldset {
  border: none;
  padding: 0;
  margin-inline: 0;
}

a {
  color: var(--text-1);
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
  text-decoration-color: var(--teal-4);
}


time {
  font-family: monospace;
  font-size: var(--step--1);
}


/* 
  Block styles 
*/

.tag {
  background: var(--label-bg, var(--gray-2));
}

/* When new tag is added */
.tag:has(input[type="checkbox"]:checked:not(:default)) {
  --label-bg: var(--green-3);
}

/* When tag is removed */
.tag:has(input[type="checkbox"]:default:not(:checked)) {
  --label-bg: var(--red-3);
}

.sidebar header {
  /* 
    TODO: have to figure out what todo do on smaller screens.
    Take advantage of horizontal space.
  */
  --sidebar-target-width: min-content;
  height: 100vh;
  overflow-y: scroll;
  position: sticky;
  top: 0;
}

.feed {
  background: var(--gray-4);
}

.feed:not(:has(.hide-after)):has(.feed-item-toggle[aria-expanded=false]) .feed-item:nth-child(n+2) {
  display: none;
}

.hide-after ~ .feed-item {
  display: none;
}

.feed-item-toggle[aria-expanded=false] .toggle-collapse,
.feed-item-toggle[aria-expanded=true] .toggle-expand {
  display: none;
}

.feed-tags {
  display: flex;
  flex-flow: flex-wrap;
  gap: var(--space-2xs);
}

.feed-tags a {
  font-size: var(--step--1);
  text-decoration: none;
  background: var(--stone-3);
  line-height: 1;
  padding: 2px 4px 1px 4px;
  border-bottom: 2px solid transparent;
}

.feed-tags a:hover {
  border-bottom-color: var(--teal-4);
}

.feed-link {
  font-weight: bold;
  background: var(--teal-0);
}

.feed-item {
  max-width: 50ch;
  display: flex;
}

.feed-item a,
.feed-item p {
  background: var(--gray-0);
  flex-grow: 1;
  padding-inline: var(--space-2xs);
}

/* 
  TODO: change colors based on color unit used. Like in fraidycat. 
  Can visually find/identify new items faster.
  Server side probably generates some class or attribute.
  Don't forget to handle future dates.
*/
.feed-item time {
  background: var(--gray-3);
  align-self: self-start;
  margin-inline-start: 2px;
  text-align: end;
  line-height: 1;
  padding: 4px 6px;
  min-width: calc(3ch + (2 * 6px));
  /* When date, month, year is displayed. Happens when date is in the future. */
  width: min-content;
}


/* 
  Component styles 
*/

/* 
Source: https://github.com/Set-Creative-Studio/cube-boilerplate/blob/main/src/css/compositions/sidebar.css
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
}

.sidebar > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 60%);
}

/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}


/* 
  Utility styles 
*/

.truncate {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}

/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}


.hidden {
  display: none;
}
